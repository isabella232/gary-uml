@startuml

title __Terminal Classes__\n

package org.rstudio.studio.client.server.remote {
   class RemoteServer <<singleton>> {
      + startTerminal(ConsoleProcessInfo, ConsoleProcess <<callback>>)
   }
}

class TerminalDiagnostics {
   - diagnostic_ : StringBuilder
   + log()
   + getLog()
   + resetLog()
}

class TerminalHelper {
   - warnBeforeClosing_ : boolean
   ~ TerminalHelper()
   + warnBeforeClosing()
   + warnBusyTerminalBeforeCommand()
}

class TerminalTab <TerminalTabPresenter> <<singleton>> {
   - pConsoleProcessFactory_ : Provider<ConsoleProcessFactory>
   + TerminalTab()
   + closeable()
   + confirmClose()
   - addTerminalProcInfo()
}

class TerminalList {
   - terminals_ : LinkedHashMap<String, TerminalListData>
   - pConsoleProcessFactory_ : Provider<ConsoleProcessFactory>
   # TerminalList()
   - initialize()
   + addTerminal()
   + addTerminal()
   + retitleTerminal()
   - setChildProcs()
   - setCwd()
   + setZombie()
   + setExitCode()
   + setCaption()
   ~ removeTerminal()
   ~ terminateAll()
   + terminalCount()
   + indexOfTerminal()
   + terminalHandleAtIndex()
   + isCaptionAvailable()
   + handleForCaption()
   + autoCloseForHandle()
   - getMetadataForHandle()
   - getFullMetadataForHandle()
   + createNewTerminal()
   + reconnectTerminal()
   + getCaption()
   + getHasSubprocs()
   + haveSubprocs()
   - startTerminal()
   - updateTerminalBusyStatus()
   + iterator()
   + onTerminalSubprocs()
   + onTerminalCwd()
   + debug_dumpTerminalList()
}

class TerminalTabPresenter {
   + confirmClose(Command)
   + onRepopulateTerminals(procList: ArrayList<ConsoleProcessInfo>)
   .. Event Handlers ..
   + onActivateNamedTerminal(event: ActivateNamedTerminalEvent)
   + onAddToTerminal(event: AddToTerminalEvent)
   + onClearTerminal(event: ClearTerminalEvent)
   + onCreateTerminal(event: CreateTerminalEvent)
   + onRemoveTerminal(event: RemoveTerminalEvent)
   + onSendToTerminal(event: SendToTerminalEvent)
   .. Command Handlers ..
   + onActivateTerminal()
   + onClearTerminalScrollbackBuffer()
   + onCloseTerminal()
   + onInterruptTerminal()
   + onNextTerminal()
   + onPreviousTerminal()
   + onRenameTerminal() 
   + onSendTerminalToEditor()
   + onShowTerminalInfo()
}

interface TerminalTabPresenter.Display {
   activateNamedTerminal(caption, createdByApi)
   activateTerminal(callback: DisplaySelectedCallback)
   activeTerminals(): boolean
   addTerminal(ConsoleProcessInfo, hasSession)
   clearTerminalScrollbackBuffer(caption: String)
   createTerminal(postCreateText: String)
   ensureTerminal()
   interruptTerminal()
   nextTerminal()
   previousTerminal()
   removeTerminal(handle)
   renameTerminal()
   repopulateTerminals(procList: ArrayList<ConsoleProcessInfo>)
   sendTerminalToEditor()
   sendToTerminal(text: String, setFocus: boolean)
   showTerminalInfo()
   terminateAllTerminals()
   terminateCurrentTerminal()
}

abstract class Shim {
   {abstract} ~ confirmClose()
   {abstract} ~ onRepopulateTerminals()
    .. Event Handlers ..
   + {abstract} onActivateNamedTerminal(event: ActivateNamedTerminalEvent)
   + {abstract} onAddTerminal(event: AddTerminalEvent)
   + {abstract} onClearTerminal(event: ClearTerminalEvent)
   + {abstract} onCreateTerminal(event: CreateTerminalEvent)
   + {abstract} onRemoveTerminal(event: RemoveTerminalEvent)
   + {abstract} onSendToTerminal(event: SendToTerminalEvent)
   .. Command Handlers ..
   {abstract} + onActivateTerminal()
   {abstract} + onClearTerminalScrollbackBuffer()
   {abstract} + onCloseTerminal()
   {abstract} + onInterruptTerminal()
   {abstract} + onNextTerminal()
   {abstract} + onPreviousTerminal()
   {abstract} + onRenameTerminal()
   {abstract} + onSendTerminalToEditor()
   {abstract} + onShowTerminalInfo()
}

class TerminalPane {
   # createMainWidget() : Widget
   # createMainToolbar() : Toolbar
   .. Event Handlers ..
   + onTerminalSessionStarted(TerminalSessionStartedEvent)
   + onTerminalSessionStopped(TerminalSessionStoppedEvent)
   + onServerProcessExit(ServerProcessExitEvent)
   + onSwitchToTerminal(SwitchToTerminalEvent)
   + onTerminalTitle(TerminalTitleEvent)
   + onSessionSerialization(SessionSerializationEvent)
   + onTerminalSubproc(TerminalSubprocEvent)
}

TerminalTabPresenter.Display <|.. TerminalPane
TerminalTabPresenter *-- "1" TerminalTabPresenter.Display

class DeckLayoutPanel
class TerminalPopupMenu

TerminalPane *-- "1" DeckLayoutPanel
TerminalPane *-- "1" TerminalPopupMenu
TerminalPane *-- "1" TerminalList

XTermWidget <|-- TerminalSession
Widget <|-- XTermWidget
XTermWidget *-- "1" XTermNative


Shim <|-- TerminalTabPresenter
TerminalPopupMenu ..> TerminalList : <<use>>
DeckLayoutPanel o-- "0..*" TerminalSession
TerminalList *-- "0..*" TerminalSession

TerminalSession *-- "1" TerminalSessionSocket
TerminalSession o-- "0..1" ConsoleProcess
TerminalSession *-- "1" ConsoleProcessInfo
ConsoleProcess o-- "1" ConsoleProcessInfo
TerminalSession --> RemoteServer : <<use>>

interface TerminalSessionSocket.Session {
   receivedInput(input: String)
   receivedOutput(output: String)
   connectionDisconnected()
}

TerminalSessionSocket.Session <|.. TerminalSession

interface TerminalSessionSocket.ConnectCallback {
   onConnected()
   onError(message: String)
}

class TerminalLocalEcho {

}

class XTermNative <<JavaScriptObject>>
class Widget
class XTermWidget

   class TerminalSession {
   - title_ : String
   - hasChildProcs_ : HasValue<Boolean>
   - connected_ : boolean
   - connecting_ : boolean
   - terminating_ : boolean
   - reloading_ : boolean
   - deferredOutput_ : ArrayList<String>
   - restartSequenceWritten_ : boolean
   - inputQueue_ : StringBuilder
   - inputSequence_ : int
   - newTerminal_ : boolean
   - showAltAfterReload_ : boolean
   - createdByApi_ : boolean
   + TerminalSession()
   - initialize()
   + connect()
   + disconnect()
   + onResizeTerminal()
   + receivedOutput()
   + connectionDisconnected()
   + receivedSendToTerminal()
   + receivedInput()
   - sendUserInput()
   - doLocalEcho()
   + onXTermTitle()
   + setTitle()
   + getTitle()
   + getCaption()
   + clearBuffer()
   + interruptTerminal()
   # addHandlerRegistration()
   # unregisterHandlers()
   # writeError()
   # onLoad()
   # onDetach()
   + setVisible()
   + getHandle()
   + getHasChildProcs()
   + setHasChildProcs()
   + addHasChildProcsChangeHandler()
   + terminate()
   - cleanupAfterTerminate()
   + onSessionSerialization()
   + isConnected()
   # terminalReady()
   - shellSupportsReload()
   - fetchNextChunk()
   + showZombieMessage()
   + writeRestartSequence()
   - setNewTerminal()
   + getProcInfo()
   + getBuffer()
   + getSocket()
   }

class TerminalSessionSocket {

}

TerminalSessionSocket *-- "1" TerminalLocalEcho

class ConsoleProcess {

}

class ConsoleProcessInfo <<JavaScriptObject>> {

}

TerminalTab -up-|> DelayLoadWorkbenchTab
TerminalTab o-- Shim : shim_
TerminalTab +-down- Shim

hide empty fields
hide empty methods

@enduml

