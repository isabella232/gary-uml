@startuml

header
Terminal Classes (GWT)
endheader

class RemoteServer <<singleton>> {
   + startTerminal(ConsoleProcessInfo, ConsoleProcess <<callback>>)
}

class TerminalTab <TerminalTabPresenter> <<singleton>> {
   + closeable(): boolean
   + confirmClose(onConfirmed: Command)
}

class TerminalTabPresenter {
   + confirmClose(Command)
   + onRepopulateTerminals(procList: ArrayList<ConsoleProcessInfo>)
   .. Event Handlers ..
   + onActivateNamedTerminal(event: ActivateNamedTerminalEvent)
   + onAddToTerminal(event: AddToTerminalEvent)
   + onClearTerminal(event: ClearTerminalEvent)
   + onCreateTerminal(event: CreateTerminalEvent)
   + onRemoveTerminal(event: RemoveTerminalEvent)
   + onSendToTerminal(event: SendToTerminalEvent)
   .. Command Handlers ..
   + onActivateTerminal()
   + onClearTerminalScrollbackBuffer()
   + onCloseTerminal()
   + onInterruptTerminal()
   + onNextTerminal()
   + onPreviousTerminal()
   + onRenameTerminal() 
   + onSendTerminalToEditor()
   + onShowTerminalInfo()
}

interface TerminalTabPresenter.Display {
   activateNamedTerminal(caption, createdByApi)
   activateTerminal(callback: DisplaySelectedCallback)
   activeTerminals(): boolean
   addTerminal(ConsoleProcessInfo, hasSession)
   clearTerminalScrollbackBuffer(caption: String)
   createTerminal(postCreateText: String)
   ensureTerminal()
   interruptTerminal()
   nextTerminal()
   previousTerminal()
   removeTerminal(handle)
   renameTerminal()
   repopulateTerminals(procList: ArrayList<ConsoleProcessInfo>)
   sendTerminalToEditor()
   sendToTerminal(text: String, setFocus: boolean)
   showTerminalInfo()
   terminateAllTerminals()
   terminateCurrentTerminal()
}

class ConsoleProcessFactory <<singleton>> {
   + interruptAndReap(Handle)
}
TerminalTab ..> ConsoleProcessFactory : <<uses>>
TerminalList ..> ConsoleProcessFactory : <<uses>>

abstract class TerminalTab.Shim {
   ~ confirmClose(onConfirmed: Command)
   ~ onRepopulateTerminals(procList: ArrayList<ConsoleProcessInfo>)
   .. Event Handlers ..
   + onActivateNamedTerminal(event: ActivateNamedTerminalEvent)
   + onAddTerminal(event: AddTerminalEvent)
   + onClearTerminal(event: ClearTerminalEvent)
   + onCreateTerminal(event: CreateTerminalEvent)
   + onRemoveTerminal(event: RemoveTerminalEvent)
   + onSendToTerminal(event: SendToTerminalEvent)
   .. Command Handlers ..
   + onActivateTerminal()
   + onClearTerminalScrollbackBuffer()
   + onCloseTerminal()
   + onInterruptTerminal()
   + onNextTerminal()
   + onPreviousTerminal()
   + onRenameTerminal()
   + onSendTerminalToEditor()
   + onShowTerminalInfo()
}

class TerminalPane {
   # createMainWidget() : Widget
   # createMainToolbar() : Toolbar
   .. Event Handlers ..
   + onTerminalSessionStarted(TerminalSessionStartedEvent)
   + onTerminalSessionStopped(TerminalSessionStoppedEvent)
   + onServerProcessExit(ServerProcessExitEvent)
   + onSwitchToTerminal(SwitchToTerminalEvent)
   + onTerminalTitle(TerminalTitleEvent)
   + onSessionSerialization(SessionSerializationEvent)
   + onTerminalSubproc(TerminalSubprocEvent)
}

TerminalTabPresenter.Display <|.. TerminalPane
TerminalTabPresenter *-- "1" TerminalTabPresenter.Display

class DeckLayoutPanel
class TerminalPopupMenu
class TerminalList

TerminalPane *-- "1" DeckLayoutPanel
TerminalPane *-- "1" TerminalPopupMenu
TerminalPane *-- "1" TerminalList

XTermWidget <|-- TerminalSession
Widget <|-- XTermWidget
XTermWidget *-- "1" XTermNative
TerminalTab *-- "1" TerminalTab.Shim
TerminalTab.Shim <|-- TerminalTabPresenter
TerminalPopupMenu ..> TerminalList : <<use>>
DeckLayoutPanel o-- "0..*" TerminalSession
TerminalList *-- "0..*" TerminalSession

TerminalSession *-- "1" TerminalSessionSocket
TerminalSession o-- "0..1" ConsoleProcess
TerminalSession *-- "1" ConsoleProcessInfo
ConsoleProcess o-- "1" ConsoleProcessInfo
TerminalSession --> RemoteServer : <<use>>

interface TerminalSessionSocket.Session {
   receivedInput(input: String)
   receivedOutput(output: String)
   connectionDisconnected()
}

TerminalSessionSocket.Session <|.. TerminalSession

interface TerminalSessionSocket.ConnectCallback {
   onConnected()
   onError(message: String)
}

class TerminalLocalEcho {

}

class XTermNative <<JavaScriptObject>>
class Widget
class XTermWidget

class TerminalSession {

}

class TerminalSessionSocket {

}

TerminalSessionSocket *-- "1" TerminalLocalEcho

class ConsoleProcess {

}

class ConsoleProcessInfo <<JavaScriptObject>> {

}

hide empty fields
hide empty methods

@enduml

